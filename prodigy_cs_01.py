# -*- coding: utf-8 -*-
"""PRODIGY_CS_01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rJFGxbxR_8j3DwJTTIja4lijT0TbQSiN
"""

def caesar_cipher(text, shift, mode='encrypt'):
    """Encrypts or decrypts a given text using Caesar Cipher.

    Args:
        text (str): The text to encrypt or decrypt.
        shift (int): The number of positions to shift the alphabet.
        mode (str): The operation mode, either 'encrypt' or 'decrypt'.

    Returns:
        str: The encrypted or decrypted text.
    """
    if mode == 'decrypt':
        shift = -shift

    encrypted_text = ""
    for char in text:
        if char.isalpha():
            shift_base = 65 if char.isupper() else 97
            encrypted_text += chr((ord(char) - shift_base + shift) % 26 + shift_base)
        else:
            encrypted_text += char
    return encrypted_text

def get_user_input():
    """Gets and validates user input for operation, message, and shift."""
    while True:
        operation = input("Do you want to (e)Encrypt or (d)Decrypt the message? Enter 'e' or 'd': ").lower()
        if operation not in ['e', 'd']:
            print("Invalid operation. Please enter 'e' for encryption or 'd' for decryption.")
            continue

        message = input("Enter the message: ")
        try:
            shift = int(input("Enter the shift value: "))
            return operation, message, shift
        except ValueError:
            print("Invalid shift value. Please enter an integer.")

def main():
    """Main function to execute the Caesar cipher operations."""
    while True:
        operation, message, shift = get_user_input()
        mode = 'encrypt' if operation == 'e' else 'decrypt'
        result = caesar_cipher(message, shift, mode)
        print(f"The resulting message is: {result}")

        another = input("Do you want to perform another operation? (yes/no): ").lower()
        if another != 'yes':
            break

if __name__ == "__main__":
    main()